name: Create a JSON of Certificate
platform: node
blocks:
  - action: if
    name: checkEnvName
    breakpoint: enabled
    condition: $env_name != ""
    then:
      - action: assign
        name: assignEnv
        variable: "$result.dependencies[0].ref"
        value: '"environment:" + $env_name'
        breakpoint: enabled
    else: []
  - name: Function_1
    function: "const jsonString = $certificates.join(\"\\n\");\n$newcertificates =\
      \ JSON.parse(jsonString);\n\n "
  - action: comment
    value: Processing each certificate data to convert into concertdef format
  - action: foreach
    name: foreachCertificates
    breakpoint: enabled
    list: $newcertificates
    blocks:
      - action: system/Common/Status Message Update
        name: StatusMessageUpdate_Checking_Metadata_1
        inputs:
          - name: message
            value: '"Converting certificate "+$foreachCertificates.index+" out of
              "+$foreachCertificates.count+"..."'
      - name: Function_2
        function: $isca = $foreachCertificates.item.CertificateType === "CA";
      - action: comment
        value: Creating the Metadata for the certificate data
      - action: assign
        name: Assign_1
        value: |-
          {
              "rna": true,
              "thumb_print": $foreachCertificates.item.Thumbprint,
              "store": $foreachCertificates.item.Store,
              "api_server" : $api_server,
              "isca": $isca
          }
        variable: $tempRnaMetadata
      - action: comment
        value: Below script designed to convert certificate date fields from a serialized
          format into a readable UTC timestamp
      - name: utcDT
        function: |
          const validFrom = $foreachCertificates.item.NotBefore ? convertDateToUTC($foreachCertificates.item.NotBefore) : null;
          const validTo = $foreachCertificates.item.NotAfter ? convertDateToUTC($foreachCertificates.item.NotAfter) : null;

          $tempUtc = [validFrom, validTo];

          function convertDateToUTC(dateString) {
              if (!dateString) {
                  return null;
              }

              // Extract the numeric timestamp from the format \/Date(1041318000000)\/
              const timestampMatch = dateString.match(/\/Date\((\d+)\)\//);
              if (!timestampMatch) {
                  return null;
              }

              const timestamp = parseInt(timestampMatch[1], 10);
              const dt = new Date(timestamp);

              const year = dt.getUTCFullYear();
              const month = String(dt.getUTCMonth() + 1).padStart(2, '0');
              const day = String(dt.getUTCDate()).padStart(2, '0');
              const hours = String(dt.getUTCHours()).padStart(2, '0');
              const minutes = String(dt.getUTCMinutes()).padStart(2, '0');
              const seconds = String(dt.getUTCSeconds()).padStart(2, '0');

              return `${year}-${month}-${day} ${hours}:${minutes}:${seconds} +0000 UTC`;
          }
      - action: comment
        value: Creating the SBOM Data
      - action: system/Common/Array/Array Push
        name: fillSBOMData
        inputs:
          - name: array
            value: $result.components
          - name: item
            value: "{\n    \"type\": \"certificate\",\n\n    \"ref\": String(\n  \
              \      \"certificate:\" + ($foreachCertificates.item.SerialNumber ?\
              \ $foreachCertificates.item.SerialNumber : \"\")\n    ),\n    \"serial_number\"\
              : $foreachCertificates.item.SerialNumber ? $foreachCertificates.item.SerialNumber\
              \ : \"\",\n\n    \"properties\": [{\n        \"name\": \"subject\",\n\
              \        \"value\": $foreachCertificates.item.Subject ? $foreachCertificates.item.Subject\
              \ : \"\"\n    }, \n    {\n        \"name\": \"namespace\",\n       \
              \ \"value\": $api_server ? $api_server : \"\"\n    }, \n    {\n    \
              \    \"name\": \"issuer\",\n        \"value\": $foreachCertificates.item.Issuer\
              \ ? $foreachCertificates.item.Issuer : \"\"\n    },\n    {\n       \
              \ \"name\": \"description\",\n        \"value\": $foreachCertificates.item.CertificateType\
              \ ? $foreachCertificates.item.CertificateType : \"\"\n    },\n    {\n\
              \        \"name\": \"certificate_type\",\n        \"value\": $foreachCertificates.item.CertificateType\n\
              \    }, {\n        \"name\": \"validity_start_date\",\n        \"value\"\
              : $tempUtc[0]\n    }, {\n        \"name\": \"validity_end_date\",\n\
              \        \"value\": $tempUtc[1]\n    }, {\n        \"name\": \"dns_names\"\
              ,\n         \"value\": $foreachCertificates.item.DnsNameList && $foreachCertificates.item.DnsNameList.length\
              \ > 0\n        ? \"\\\"\" + $foreachCertificates.item.DnsNameList.join(\"\
              , \") + \"\\\"\"\n        : \"\"\n    }, {\n        \"name\": \"metadata\"\
              ,\n\n        \"value\": JSON.stringify($tempRnaMetadata)\n    }]\n}"
      - action: system/Common/Array/Array Push
        name: addDependency
        inputs:
          - name: array
            value: "$result.dependencies[0].depends_on"
          - name: item
            value: "String(\"certificate:\" + ($foreachCertificates.item.SerialNumber\
              \ ? $foreachCertificates.item.SerialNumber : \"\"))"
  - action: ./Ingest JSON Certificates Data into IBM Concert
    name: ingest
    inputs:
      - name: auth
        value: $concert_auth
      - name: json
        value: JSON.stringify($result)
      - name: data_type
        value: '"certificate"'
    breakpoint: enabled
  - action: assign
    name: Assign_2
    variable: $result
    value: $ingest.result
variables:
  - name: certificates
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: array
    value: "[]"
  - name: tempUtc
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: array
    value: "[]"
  - name: tempRnaMetadata
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: object
    value: |-
      {
          "rna": true,
      }
  - name: result
    required: false
    isInput: false
    isOutput: true
    level: INTERMEDIATE
    type:
      type: object
    value: |-
      {
          "components": [],
          "dependencies": [{
              "ref": "environment: $env_name",
              "depends_on": []
          }]
      }
  - name: concert_auth
    required: false
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '""'
    meta:
      authType: Common/SSH
      subType: authentication
  - name: newcertificates
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: array
    value: "[]"
  - name: env_name
    required: false
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '""'
  - name: api_server
    required: false
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '""'
  - name: isca
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: boolean
    value: "false"
meta:
  workerGroup: default
  description: "Creates a JSON of  certificate, while converting timestamp from GMT\
    \ to UTC"
  layout: flat
  version: 5
finally: null
