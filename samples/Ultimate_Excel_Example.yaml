name: Ultimate_Excel_Example
platform: node
blocks:
  - action: comment
    value: "Make a new, blank excel file"
  - action: system/Excel/Create File
    name: Excel_NewFile
  - action: comment
    value: We'll use the $fileData variable to hold the current version of the Excel
      file data throughout the rest of the flow
  - action: assign
    name: Assign_2
    variable: $fileData
    value: $Excel_NewFile.result
  - action: comment
    value: Loop through each element in our array of objects
  - action: foreach
    name: ForEach_InventoryItem
    blocks:
      - action: comment
        value: "If this is the first object in the array, we'll build a header row\
          \ from it and then use its values for the first row"
      - action: if
        name: If_1
        then:
          - action: comment
            value: Get an array of property names from the first object
          - action: system/Common/Object/Object Keys
            name: ObjectKeys_1
            inputs:
              - name: object
                value: $ForEach_InventoryItem.item
          - action: system/Excel/Append Row
            name: Excel_AddHeaderRow
            inputs:
              - name: values
                value: $ObjectKeys_1.result
              - name: sheetName
                value: '"Sheet1"'
              - name: fileData
                value: $fileData
            breakpoint: enabled
          - action: comment
            value: Get an array of values from the first object
          - action: system/Common/Object/Object Values
            name: ObjectValues_2
            inputs:
              - name: object
                value: $ForEach_InventoryItem.item
          - action: system/Excel/Append Row
            name: Excel_AddFirstRow
            breakpoint: enabled
            inputs:
              - name: values
                value: $ObjectValues_2.result
              - name: sheetName
                value: '"Sheet1"'
              - name: fileData
                value: $Excel_AddHeaderRow.result
          - action: comment
            value: Save the Excel file data with the header and first row into the
              $fileData variable
          - action: assign
            name: Assign_3
            variable: $fileData
            value: $Excel_AddFirstRow.result
        else:
          - action: comment
            value: "We are not on the first object, so we only need to extract the\
              \ values and add a new row to our sheet"
          - action: system/Common/Object/Object Values
            name: ObjectValues_1
            inputs:
              - name: object
                value: $ForEach_InventoryItem.item
          - action: system/Excel/Append Row
            name: Excel_AddNextRow
            breakpoint: enabled
            inputs:
              - name: values
                value: $ObjectValues_1.result
              - name: sheetName
                value: '"Sheet1"'
              - name: fileData
                value: $fileData
          - action: comment
            value: Overwrite the $fileData with the updated data now that we've added
              the row
          - action: assign
            name: Assign_4
            variable: $fileData
            value: $Excel_AddNextRow.result
        condition: $ForEach_InventoryItem.isFirst
    list: $demo_data
    breakpoint: enabled
  - action: comment
    value: "Our file is now complete with all of our data from our flow. Now we need\
      \ to send the file to the desired location. There are many more options for\
      \ places to put files beyond these four examples! Note that to use any option,\
      \ you will need to provide an authKey for the desired destination. "
  - action: switch
    name: SwitchCase_1
    expression: $destination
    cases:
      - value: '"sftp"'
        blocks:
          - action: system/Common/SFTP/SFTP Put File
            name: sftp_putFile_1
            inputs:
              - name: authKey
                value: '"admin/Local_Pliant_SSH"'
              - name: file
                value: '"demo_excel_file.xlsx"'
              - name: contents
                value: $fileData
              - name: encoding
                value: '"binary"'
      - value: '"samba"'
        blocks:
          - action: system/Common/Samba/Samba Send File
            name: SambaSendFile_1
            inputs:
              - name: fileData
                value: $fileData
              - name: destination
                value: '"/demo_excel_file.xlsx"'
              - name: encoding
                value: '"binary"'
      - value: '"s3"'
        blocks:
          - action: system/AWS/s3/PutObject
            name: AWS_1
            inputs:
              - name: region
                value: '"us-east-1"'
              - name: Bucket
                value: '"tempo3"'
              - name: Key
                value: '"demo_excel_file.xlsx"'
              - name: body
                value: $fileData
      - value: '"email"'
        blocks:
          - action: system/Common/Email/Email
            name: Email_1
            inputs:
              - name: from
                value: '"demo@yourplace.com"'
              - name: to
                value: '"you@yourplace.com"'
              - name: subject
                value: '"Demo Excel File Attached"'
              - name: text
                value: '"The inventory data you requested is in the attached Excel
                  file."'
              - name: attachments
                value: "[{\n        \"filename\": \"demo_excel_file.xlsx\",\n    \
                  \    \"content\": $fileData,\n        \"encoding\": \"binary\"\n\
                  \    \n    \n}]"
    default:
      - action: comment
        value: Having a default case let's us give a meaningful error if there was
          no valid destination for the file
      - action: throw
        error: "\"Invalid file destination: \" + $destination"
  - action: comment
    value: "As a last step, we'll record the size of our final Excel file in the $result\
      \ variable"
  - action: assign
    name: Assign_1
    variable: $result
    value: "\"Final data file size: \" + $fileData.length"
variables:
  - name: result
    required: false
    isInput: false
    isOutput: true
    level: INTERMEDIATE
    type:
      type: any
    value: '""'
  - name: demo_data
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: array
    value: |-
      [{
      "Item":"Apple",
      "Quantity": 6,
      "Location": "Bin4",
      "Reorder_Threshold": 4
      },{
      "Item":"Lettuce",
      "Quantity": 56,
      "Location": "Bin15",
      "Reorder_Threshold": 8
      },{
      "Item":"Pastrami",
      "Quantity": 34,
      "Location": "Case12",
      "Reorder_Threshold": 3
      },{
      "Item":"Orange",
      "Quantity": 9,
      "Location": "Bin12",
      "Reorder_Threshold": 4
      }]
  - name: destination
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
      enum:
        - sftp
        - samba
        - s3
        - email
    value: '"samba"'
  - name: fileData
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '""'
meta:
  version: 5
  description: "Take an array of objects filled with dummy data, populates an Excel\
    \ sheet, then shows examples of putting the sheet:\n*onto a Linux server via SFTP\n\
    *onto a Windows server via Samba\n*into AWS S3\n*in an email as an attachment "
  layout: flat
  workerGroup: default
finally: null
